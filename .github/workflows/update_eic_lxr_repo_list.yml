name: Workflow to update the list of files in eic lxr

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  pull_request:
  
env:
  GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
  ORG_NAME: "eic"
  SUPPLEMENTAL_REPOS: '["acts-project_ORG_acts","JeffersonLab_ORG_jana","JeffersonLab_ORG_DEMPgen"]'

jobs:
  check_active_repos:
    runs-on: ubuntu-latest
    outputs:
      active_repos: ${{ steps.check_active_repos.outputs.active_repos }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up dependencies (curl and jq)
      - name: Set up curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # Step 3: Run the shell script to check active repositories
      - name: Check Active Repositories
        id: check_active_repos
        run: |
          # Variables
          API_URL="https://api.github.com/orgs/$ORG_NAME/repos"
          CUTOFF_DATE=$(date -d "6 months ago" --utc +"%Y-%m-%dT%H:%M:%SZ")
          
          # Get list of repositories (with pagination)
          page=1
          TEMP_FILE="/tmp/active_repos.txt"  # Temp file to store active repo names
          # Initialize the temp file
          echo "" > "$TEMP_FILE"

          # Parse the JSON array into an array
          supplemental_repos=$(echo "$SUPPLEMENTAL_REPOS" | jq -r '.[]')

          # Loop through each repository
          for supplemental_repo_name in $supplemental_repos; do
            echo "$supplemental_repo_name" >> "$TEMP_FILE"  # Append to temp file
            echo "Added $supplemental_repo_name to active repositories"
          done

          while true; do
            response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$API_URL?page=$page&per_page=100")

            # Check if the response is not an array
            if echo "$response" | jq -e 'type != "array"' > /dev/null; then
              # Check if the response contains an error message field
              if echo "$response" | jq -e 'has("message")' > /dev/null; then
                error_message=$(echo "$response" | jq -r '.message')
                echo "Error: $error_message"
                break
              fi
            fi
            
            # Check if there are no more repositories
            if [[ "$(echo "$response" | jq length)" -eq 0 ]]; then
              break
            fi

            # Loop through each repository to check the last commit date
            echo "$response" | jq -r '.[].name' | while read repo_name; do
              commits_url="https://api.github.com/repos/$ORG_NAME/$repo_name/commits?per_page=1"
              commit_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$commits_url")

              # Check if the commit response is an array
              if echo "$commit_response" | jq -e 'type == "array"' > /dev/null; then
                # If it's an array, check if there are commits
                if [[ $(echo "$commit_response" | jq length) -gt 0 ]]; then
                  last_commit_date=$(echo "$commit_response" | jq -r '.[0].commit.committer.date')
                  if [[ "$last_commit_date" > "$CUTOFF_DATE" ]]; then
                    echo "${ORG_NAME}_ORG_${repo_name}" >> "$TEMP_FILE"  # Append to temp file
                    echo "Added $repo_name to active repositories"
                  fi
                else
                  echo "No commits found for repository: $repo_name"
                fi
              else
                # If it's not an array, check for an error message
                if echo "$commit_response" | jq -e 'has("message")' > /dev/null; then
                  error_message=$(echo "$commit_response" | jq -r '.message')
                  echo "Error for $repo_name: $error_message"
                else
                  echo "Unexpected response format for $repo_name."
                fi
              fi      
            done
            echo "Now changing from page $page to $((page+1))"
            page=$((page + 1))
          done

          if [[ -s "$TEMP_FILE" ]]; then
            active_repos=($(cat "$TEMP_FILE"))  # Read active repos into an array

            # Convert array to JSON format for output
            # Ensure quotes around campaign names
            active_repos_json=$(printf ',"%s"' "${active_repos[@]}")
            active_repos_json="[${active_repos_json:1}]"  # Remove leading comma

            echo $active_repos_json
            # Output campaigns as a JSON array
            echo "active_repos=${active_repos_json}" >> $GITHUB_OUTPUT
          fi 
          
  get_tag_list:
    needs: check_active_repos
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo_name: ${{ fromJson(needs.check_active_repos.outputs.active_repos) }}
    steps:
      - name: Get tag list
        id: get_tag_list
        run: |
          repo_name="${{ matrix.repo_name }}"  
          TEMP_V_FILE="/tmp/tag_list_${repo_name}.txt"
          echo "" > "$TEMP_V_FILE"
          echo "Checking repository: $repo_name"

          repo_name="${repo_name//_ORG_/\/}"  # Replace colons with forward slashes

          # Get tags for the repository
          tags_url="https://api.github.com/repos/$repo_name/tags"
          tags_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$tags_url")

          # Check if the response is an array
          if echo "$tags_response" | jq -e 'type == "array"' > /dev/null; then
            # Loop through each tag to extract the version
            echo "$tags_response" | jq -r '.[].name' | while read tag; do
              # Check if any portion of the tag matches the CALVER or SEMVER pattern 
              if [[ "$tag" =~ [0-9]+\.[0-9]+ ]] || [[ "$tag" =~ v[0-9]+ ]]; then
                echo "https://github.com/$repo_name==$tag" >> "$TEMP_V_FILE"
              else
                echo "Tag does not follow CALVER or SEMVER: $tag"
              fi
            done
          else
            echo "No tags found for repository $repo_name or response format is incorrect."
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tag_list_${{ matrix.repo_name }}
          path: "/tmp/tag_list_${{ matrix.repo_name }}.txt"

  update_eic_lxr_list:
    needs: get_tag_list
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
   
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Combine all tag lists and display
        run: |
          cat tag_list*/* | grep -v '^\s*$' > eic_lxr_list.txt

          cat eic_lxr_list.txt
          
          
