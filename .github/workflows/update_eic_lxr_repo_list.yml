name: Workflow to update the list of files in eic lxr

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  pull_request:

jobs:
  check-active-repos:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up dependencies (curl and jq)
      - name: Set up curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # Step 3: Run the shell script to check active repositories
      - name: Check Active Repositories
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
          ORG_NAME: "eic"
        run: |
          # Variables
          API_URL="https://api.github.com/orgs/$ORG_NAME/repos"
          CUTOFF_DATE=$(date -d "6 months ago" --utc +"%Y-%m-%dT%H:%M:%SZ")
          
          # Get list of repositories (with pagination)
          page=1
          TEMP_FILE="/tmp/active_repos.txt"  # Temp file to store active repo names
          TEMP_V_FILE="/tmp/active_repos_version.txt" # Temp file to store active repo names with release versions matching calver and semver
          # Initialize the temp file
          echo "" > "$TEMP_FILE"
          echo "" > "$TEMP_V_FILE"

          while true; do
            response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$API_URL?page=$page&per_page=100")

            # Check if the response is not an array
            if echo "$response" | jq -e 'type != "array"' > /dev/null; then
              # Check if the response contains an error message field
              if echo "$response" | jq -e 'has("message")' > /dev/null; then
                error_message=$(echo "$response" | jq -r '.message')
                echo "Error: $error_message"
                break
              fi
            fi
            
            # Check if there are no more repositories
            if [[ "$(echo "$response" | jq length)" -eq 0 ]]; then
              break
            fi

            # Loop through each repository to check the last commit date
            echo "$response" | jq -r '.[].name' | while read repo_name; do
              commits_url="https://api.github.com/repos/$ORG_NAME/$repo_name/commits?per_page=1"
              commit_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$commits_url")

              # Check if the commit response is an array
              if echo "$commit_response" | jq -e 'type == "array"' > /dev/null; then
                # If it's an array, check if there are commits
                if [[ $(echo "$commit_response" | jq length) -gt 0 ]]; then
                  last_commit_date=$(echo "$commit_response" | jq -r '.[0].commit.committer.date')
                  echo $last_commit_date
                  echo $CUTOFF_DATE
                  if [[ "$last_commit_date" > "$CUTOFF_DATE" ]]; then
                    echo "$repo_name" >> "$TEMP_FILE"  # Append to temp file
                    echo "Added $repo_name to active repositories"
                  fi
                else
                  echo "No commits found for repository: $repo_name"
                fi
              else
                # If it's not an array, check for an error message
                if echo "$commit_response" | jq -e 'has("message")' > /dev/null; then
                  error_message=$(echo "$commit_response" | jq -r '.message')
                  echo "Error for $repo_name: $error_message"
                else
                  echo "Unexpected response format for $repo_name."
                fi
              fi      
            done
            echo "Now changing from page $page to $((page+1))"
            page=$((page + 1))
          done

          if [[ -s "$TEMP_FILE" ]]; then
            active_repos=($(cat "$TEMP_FILE"))  # Read active repos into an array
            echo "Repositories with commits in the last 6 months:"
            # Loop through active repositories
            for repo_name in "${active_repos[@]}"; do
              echo "Checking repository: $repo_name"

              # Get tags for the repository
              tags_url="https://api.github.com/repos/$ORG_NAME/$repo_name/tags"
              tags_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$tags_url")

              # Check if the response is an array
              if echo "$tags_response" | jq -e 'type == "array"' > /dev/null; then
                # Loop through each tag to extract the version
                echo "$tags_response" | jq -r '.[].name' | while read tag; do
                  # Check if tag matches the CALVER pattern (YYYY.MM.DD or similar)
                  if [[ "$tag" =~ ^[0-9]{4}\.[0-9]{2}\.[0-9]{2}$ ]]; then
                    echo "https://github.com/$ORG_NAME/$repo_name==$tag" >> "TEMP_V_FILE"
                  # Check if tag matches the SEMVER pattern (X.Y.Z or X.Y.Z-alpha)
                  elif [[ "$tag" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
                    echo "https://github.com/$ORG_NAME/$repo_name==$tag" >> "TEMP_V_FILE"
                  else
                    echo "Tag does not follow CALVER or SEMVER: $tag"
                  fi
                done
              else
                echo "No tags found for repository $repo_name or response format is incorrect."
              fi
            done

          else
            echo "No active repositories found."
          fi

          cat "$TEMP_V_FILE"

          # Clean up the temp file
          rm -f "$TEMP_FILE"
          rm -f "$TEMP_V_FILE"
